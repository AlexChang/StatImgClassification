Best parameters set found on training set:
{'C': 10, 'dual': True, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.0001}
Grid scores on training set:
0.96000 (+/-0.07775) for {'C': 1, 'dual': True, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.001}
0.96000 (+/-0.07775) for {'C': 1, 'dual': True, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.0001}
0.96000 (+/-0.07775) for {'C': 1, 'dual': True, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 1e-05}
0.94667 (+/-0.08000) for {'C': 1, 'dual': True, 'loss': 'hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.001}
0.94667 (+/-0.08000) for {'C': 1, 'dual': True, 'loss': 'hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.0001}
0.94667 (+/-0.08000) for {'C': 1, 'dual': True, 'loss': 'hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 1e-05}
0.97333 (+/-0.04989) for {'C': 10, 'dual': True, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.001}
0.98000 (+/-0.05333) for {'C': 10, 'dual': True, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.0001}
0.97333 (+/-0.04989) for {'C': 10, 'dual': True, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 1e-05}
0.93333 (+/-0.09428) for {'C': 10, 'dual': True, 'loss': 'hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.001}
0.93333 (+/-0.09428) for {'C': 10, 'dual': True, 'loss': 'hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.0001}
0.93333 (+/-0.09428) for {'C': 10, 'dual': True, 'loss': 'hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 1e-05}
0.94667 (+/-0.10832) for {'C': 100, 'dual': True, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.001}
0.96000 (+/-0.06532) for {'C': 100, 'dual': True, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.0001}
0.96667 (+/-0.07303) for {'C': 100, 'dual': True, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 1e-05}
0.95333 (+/-0.09043) for {'C': 100, 'dual': True, 'loss': 'hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.001}
0.94667 (+/-0.08000) for {'C': 100, 'dual': True, 'loss': 'hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.0001}
0.94000 (+/-0.06532) for {'C': 100, 'dual': True, 'loss': 'hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 1e-05}
0.96000 (+/-0.06532) for {'C': 1000, 'dual': True, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.001}
0.96000 (+/-0.09798) for {'C': 1000, 'dual': True, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.0001}
0.92667 (+/-0.06532) for {'C': 1000, 'dual': True, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 1e-05}
0.91333 (+/-0.09043) for {'C': 1000, 'dual': True, 'loss': 'hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.001}
0.93333 (+/-0.08433) for {'C': 1000, 'dual': True, 'loss': 'hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.0001}
0.93333 (+/-0.13984) for {'C': 1000, 'dual': True, 'loss': 'hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 1e-05}
0.96000 (+/-0.06532) for {'C': 1, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l1', 'tol': 0.001}
0.96667 (+/-0.07303) for {'C': 1, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l1', 'tol': 0.0001}
0.96667 (+/-0.07303) for {'C': 1, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l1', 'tol': 1e-05}
0.96000 (+/-0.07775) for {'C': 1, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.001}
0.96000 (+/-0.07775) for {'C': 1, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.0001}
0.96000 (+/-0.07775) for {'C': 1, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 1e-05}
0.96667 (+/-0.07303) for {'C': 10, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l1', 'tol': 0.001}
0.96667 (+/-0.07303) for {'C': 10, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l1', 'tol': 0.0001}
0.96667 (+/-0.07303) for {'C': 10, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l1', 'tol': 1e-05}
0.98000 (+/-0.05333) for {'C': 10, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.001}
0.98000 (+/-0.05333) for {'C': 10, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.0001}
0.98000 (+/-0.05333) for {'C': 10, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 1e-05}
0.96667 (+/-0.04216) for {'C': 100, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l1', 'tol': 0.001}
0.97333 (+/-0.04989) for {'C': 100, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l1', 'tol': 0.0001}
0.97333 (+/-0.04989) for {'C': 100, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l1', 'tol': 1e-05}
0.96667 (+/-0.07303) for {'C': 100, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.001}
0.96667 (+/-0.07303) for {'C': 100, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.0001}
0.97333 (+/-0.04989) for {'C': 100, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 1e-05}
0.96667 (+/-0.04216) for {'C': 1000, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l1', 'tol': 0.001}
0.96667 (+/-0.04216) for {'C': 1000, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l1', 'tol': 0.0001}
0.96667 (+/-0.04216) for {'C': 1000, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l1', 'tol': 1e-05}
0.96667 (+/-0.07303) for {'C': 1000, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.001}
0.97333 (+/-0.04989) for {'C': 1000, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 0.0001}
0.97333 (+/-0.04989) for {'C': 1000, 'dual': False, 'loss': 'squared_hinge', 'max_iter': 5000, 'penalty': 'l2', 'tol': 1e-05}
